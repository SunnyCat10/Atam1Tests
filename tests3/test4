.global _start

.section .text

  movq root, %rdi
  xor %r8, %r8
  movl __ExpectedArraySize, %r8d
  movq $__ExpectedArray, %r9
  movq $0, %r10
  call rec

  cmp %r10, %r8
  jne bad_exit
  
  movq $60, %rax
  movq $0, %rdi
  syscall

bad_exit:
  movq $60, %rax
  movq $1, %rdi
  syscall

rec:
  pushq %rdi
  movq (%rdi), %r11
  cmp $0, %r11
  je skip_left
  movq %r11, %rdi
  call rec
  movq (%rsp), %rdi
skip_left:
  cmpq %r8, %r10
  je bad_exit
  movl 8(%rdi), %eax
  movl (%r9, %r10, 4), %edx
  cmpl %eax, %edx
  jne bad_exit
  inc %r10

  movq 12(%rdi), %r11
  cmp $0, %r11
  je skip_right
  movq %r11, %rdi
  call rec
skip_right:
  popq %rdi
  ret


.section .data
__ExpectedArray: .int -211342434, 850163427, 1368798399
__Garbage_85410070: .byte 110, 96, 153, 3, 48, 217
__ExpectedArraySize: .int 3
__Garbage_309126073: .byte 83, 229, 1, 5, 0
__Nodes:
.quad 0
.int -211342434
.quad 0
.quad __Nodes + 0
.int 1368798399
.quad 0
__Garbage_31657492: .byte 184, 101, 85, 140, 192, 50
root:
.quad __Nodes + 20
__Garbage_424551408: .byte 89, 250, 77, 31, 74
node:
.quad 2081487972
.int 850163427
.quad -1084664652
