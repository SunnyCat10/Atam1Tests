.global _start

.section .text

  movq root, %rdi
  xor %r8, %r8
  movl __ExpectedArraySize, %r8d
  movq $__ExpectedArray, %r9
  movq $0, %r10
  call rec

  cmp %r10, %r8
  jne bad_exit
  
  movq $60, %rax
  movq $0, %rdi
  syscall

bad_exit:
  movq $60, %rax
  movq $1, %rdi
  syscall

rec:
  pushq %rdi
  movq (%rdi), %r11
  cmp $0, %r11
  je skip_left
  movq %r11, %rdi
  call rec
  movq (%rsp), %rdi
skip_left:
  cmpq %r8, %r10
  je bad_exit
  movl 8(%rdi), %eax
  movl (%r9, %r10, 4), %edx
  cmpl %eax, %edx
  jne bad_exit
  inc %r10

  movq 12(%rdi), %r11
  cmp $0, %r11
  je skip_right
  movq %r11, %rdi
  call rec
skip_right:
  popq %rdi
  ret


.section .data
__ExpectedArray: .int -768022032
__Garbage_725236514: .byte 200, 63, 214
__ExpectedArraySize: .int 1
__Garbage_854912577: .byte 73, 239
__Nodes:
.quad 0
.int -768022032
.quad 0
__Garbage_296928719: .byte 136, 92, 13, 197, 53
root:
.quad __Nodes + 0
__Garbage_797839257: .byte 134, 21, 169, 182, 88, 224, 180
node:
.quad -1034947554
.int -768022032
.quad -1464216611
