.global _start

.section .text

  movq root, %rdi
  xor %r8, %r8
  movl __ExpectedArraySize, %r8d
  movq $__ExpectedArray, %r9
  movq $0, %r10
  call rec

  cmp %r10, %r8
  jne bad_exit
  
  movq $60, %rax
  movq $0, %rdi
  syscall

bad_exit:
  movq $60, %rax
  movq $1, %rdi
  syscall

rec:
  pushq %rdi
  movq (%rdi), %r11
  cmp $0, %r11
  je skip_left
  movq %r11, %rdi
  call rec
  movq (%rsp), %rdi
skip_left:
  cmpq %r8, %r10
  je bad_exit
  movl 8(%rdi), %eax
  movl (%r9, %r10, 4), %edx
  cmpl %eax, %edx
  jne bad_exit
  inc %r10

  movq 12(%rdi), %r11
  cmp $0, %r11
  je skip_right
  movq %r11, %rdi
  call rec
skip_right:
  popq %rdi
  ret


.section .data
__ExpectedArray: .int -1265899299, -798882845, 767459275, 1129087220, 1734562572

__ExpectedArraySize: .int 5
__Garbage_144358588: .byte 180, 117, 20, 155, 2, 232
__Nodes:
.quad 0
.int 767459275
.quad 0
.quad 0
.int -1265899299
.quad __Nodes + 60
.quad __Nodes + 0
.int 1129087220
.quad 0
.quad __Nodes + 40
.int 1734562572
.quad 0
__Garbage_365360622: .byte 140, 188
root:
.quad __Nodes + 20
__Garbage_702302168: .byte 170, 229, 226, 159, 81
node:
.quad -1754880035
.int -798882845
.quad 370455117
